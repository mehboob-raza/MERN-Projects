const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const JWT = require('jsonwebtoken');
const cookie = require('cookie');


// creating Schema 

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: [true, 'username is required']
    },
    email: {
        type: String,
        required: [true, 'email is required'],
        unique: true
    },
    password: {
        type: String,
        required: [true, 'password is required'],
        minlength: [6, 'Password must be at least 6 characters']
    },
    customerID: {
        type: String,
        default: ''
    },
    subscription: {
        type: String,
        default: ''
    }
})

// hashed password \\

userSchema.pre('save', async function (next) {

    // to update the password 
    if (!this.isModified('password')) {
        next()
    }

    // maximum 10 rounds for genSalt otherwise processor takes much time to execute
    const salt = await bcrypt.genSalt(10)
    this.password = await bcrypt.hash(this.password, salt)
    next()
})

// match the password

userSchema.methods.matchPassword = async function (password) {
    return await bcrypt.compare(password, this.password)
}

//sign token

userSchema.methods.getSignToken = function (res) {
    // id is generated by-default in Schema
    const accessToken = JWT.sign({ id: this._id }, process.env.JWT_ACCESS_SECRET, { expiresIn: process.env.JWT_ACCESS_EXPIRATION })

    const refreshToken = JWT.sign({ id: this._id }, process.env.JWT_REFRESH_TOKEN, { expiresIn: process.env.JWT_REFRESH_EXPIRATION })

    res.cookie('refreshToken', `${refreshToken}`, { maxAge: 86400 * 7000, httpOnly: true })
}

const User = mongoose.model('User', userSchema);
module.exports = User;

